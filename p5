from collections import defaultdict
import math

training_data = [
    (["fun", "couple", "love", "love"], "Comedy"),
    (["fast", "furious", "shoot"], "Action"),
    (["couple", "fly", "fast", "fun", "fun"], "Comedy"),
    (["furious", "shoot", "shoot", "fun"], "Action"),
    (["fly", "fast", "shoot", "love"], "Action")
]

test_doc = ["fast", "couple", "shoot", "fly"]

class_counts = defaultdict(int)
word_counts = defaultdict(lambda: defaultdict(int))
total_words = defaultdict(int)

for words, label in training_data:
    class_counts[label] += 1
    total_words[label] += len(words)
    for word in words:
        word_counts[label][word] += 1

total_docs = sum(class_counts.values())
vocabulary = set(word for words, _ in training_data for word in words)
V = len(vocabulary)

class_priors = {label: class_counts[label] / total_docs for label in class_counts}

def compute_likelihood(word, label):
    return (word_counts[label][word] + 1) / (total_words[label] + V)

posteriors = {}
for label in class_counts:
    log_prob = math.log(class_priors[label])
    for word in test_doc:
        log_prob += math.log(compute_likelihood(word, label))
    posteriors[label] = log_prob

predicted_class = max(posteriors, key=posteriors.get)

print("\nClass Priors:")
for label, prior in class_priors.items():
    print(f"P({label}) = {prior:.4f}")

print("\nWord Likelihoods:")
for label in class_counts:
    print(f"\nClass: {label}")
    for word in vocabulary:
        print(f"P({word} | {label}) = {compute_likelihood(word, label):.4f}")

print("\nPosterior Probabilities:")
for label, prob in posteriors.items():
    print(f"P({label} | D) = {math.exp(prob):.6f}")

print(f"\nThe document {test_doc} is classified as: **{predicted_class}**")
